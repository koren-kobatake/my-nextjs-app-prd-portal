// プリフライトリクエストに対するレスポンスに必要なAccess-Control-Allow-Originヘッダーが含まれていないために発生しています。
Access to fetch at 'http://localhost:3000/ledgerInquiryPostTest' (redirected from 'http://localhost:3000/api/ledgerInquiry/loginPostTest') from origin 'http://127.0.0.1:8000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.

// Access-Control-Allow-Originヘッダーに複数の値が含まれているために発生しています。
Access to fetch at 'http://localhost:3000/api/ledgerInquiry/loginPostTest' from origin 'http://127.0.0.1:8000' has been blocked by CORS policy: The 'Access-Control-Allow-Origin' header contains multiple values '*, 127.0.0.1:8000', but only one is allowed. Have the server send the header with a valid value, or, if an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.

// （http://localhost:3000/ledgerInquiryPostTest）からのレスポンスに必要なAccess-Control-Allow-Originヘッダーが含まれていないために発生しています。リダイレクト先が静的なページである場合、CORSヘッダーを追加する方法は限られています。通常、静的なページにはサーバーサイドでCORSヘッダーを設定することはできません。
Access to fetch at 'http://localhost:3000/ledgerInquiryPostTest' (redirected from 'http://localhost:3000/api/ledgerInquiry/loginPostTest') from origin 'http://127.0.0.1:8000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.

-------------------------------------------------------------------

★★★★★★★★★★★★★★★★★★★★　これで解決！！

リダイレクトを行わずに、クライアント側で手動でリダイレクトする方法を示します。

1. APIエンドポイントの修正
APIエンドポイントでは、リダイレクトURLをJSONで返すようにします。

-------------------------------------------------------------------

プリフライトリクエスト（OPTIONSメソッド）に対して正しいCORSヘッダーを設定することで、この問題を解決できます。以下のコードでは、プリフライトリクエストとPOSTリクエストの両方に対して適切なCORSヘッダーを設定しています。

### 現行コードの修正

```typescript
import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  const { userId, cic } = await req.json();

  const baseUrl = `http://localhost:3000`;
  const redirectUrl = `${baseUrl}/ledgerInquiryPostTest`;

  const response = NextResponse.json({ redirectUrl });

  // CORSヘッダーを設定
  response.headers.set('Access-Control-Allow-Origin', 'http://127.0.0.1:8000');
  response.headers.set('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  response.headers.set('Access-Control-Allow-Headers', 'Content-Type');

  return response;
}

export async function OPTIONS(req: NextRequest) {
  const response = new NextResponse(null, { status: 204 });

  // CORSヘッダーを設定
  response.headers.set('Access-Control-Allow-Origin', 'http://127.0.0.1:8000');
  response.headers.set('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  response.headers.set('Access-Control-Allow-Headers', 'Content-Type');

  return response;
}
```

このコードでは、POSTリクエストとOPTIONSリクエストの両方に対してCORSヘッダーを設定しています。これにより、プリフライトリクエストに対するレスポンスに必要な`Access-Control-Allow-Origin`ヘッダーが含まれ、CORSポリシーによってリクエストがブロックされることを防ぎます。

### 注意点

- `Access-Control-Allow-Origin`に`'*'`を使用すると、すべてのオリジンからのリクエストが許可されますが、認証情報（クッキーやHTTP認証ヘッダー）を含むリクエストでは使用できません。特定のオリジンを指定する必要がある場合は、例えば`'http://127.0.0.1:8000'`のように具体的なオリジンを設定してください。

### クライアント側のコード

クライアント側のコードはそのままで問題ありません。

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Form</title>
</head>
<body>
    <form id="login-form">
        <input type="text" id="userId" placeholder="User ID" required>
        <input type="text" id="cic" placeholder="CIC" required>
        <button type="submit">Login</button>
    </form>
    <script>
        document.getElementById('login-form').addEventListener('submit', async function (e) {
            e.preventDefault();

            const userId = document.getElementById('userId').value;
            const cic = document.getElementById('cic').value;

            try {
                const response = await fetch('http://localhost:3000/api/ledgerInquiry/loginPostTest', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ userId, cic })
                });

                if (response.ok) {
                    const data = await response.json();
                    // 手動でリダイレクト（新しいウィンドウで開く）
                    window.open(data.redirectUrl, '_blank');
                } else {
                    alert('認証に失敗しました');
                }            
            } catch (error) {
                console.error('Error:', error);
                alert('リクエストに失敗しました');
            }
        });
    </script>
  </body>
</html>
```

この設定により、プリフライトリクエストとPOSTリクエストの両方でCORSポリシーに対応できるようになります。