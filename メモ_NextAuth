NextAuthのセッションをサーバーサイドで管理してみる
https://zenn.dev/msy/articles/08f79b0d817a90

=====================================================================

Django
    画面リンク押下
        APIコール（/api/login）
            POST
            パラメタ（userId,sessionId,cic,pagePath）

Next
    バックエンド（api/login）
        JWT作成（userId,sessionId,cic,pagePath）
            有効期限は3秒とかにする
        login画面リダイレクト
            JWTをパラメタとしてリダイレクト

    フロントエンド（login）
        サインイン処理
            APIコール（api/auth/sign-in）
                POST
                パラメタ（JWTトークン（userId,sessionId,cic,pagePath））
        画面リダイレクト（pagePath）

    バックエンド（api/auth/sign-in）
        JWTトークン復号化（userId,sessionId,cic,pagePath）
        認証処理（userId,sessionId）
        ロール取得処理（userId）
        セッション作成（userId,cic,role）
        処理結果とpagePathを返す

    フロントエンド（pagePath）
        セッションチェック（userId,cic,role取得）
        認可チェック
        画面表示

    バックエンド（api/auth/get-session）
        JWTトークン復号化（userId,sessionId,cic,pagePath）
        認証処理（userId,sessionId）
        ロール取得処理（userId）
        セッション作成（userId,cic,role）
        処理結果とpagePathを返す


======================================================================
セッションストアとは、ウェブアプリケーションがユーザーのセッションデータを保存するための仕組みや場所のことを指します。
セッションストアは、セッションIDと関連するデータ（例：ユーザー情報、認証トークン、その他の一時的なデータ）を保存し、
各ユーザーがウェブアプリケーションにアクセスする際にそのセッションデータを取得するために使用されます。
セッションストアにはいくつかの一般的な実装方法があります。以下に代表的なものを挙げます。

### 1. **インメモリストア**
- **説明**: セッションデータをサーバーのメモリ内に保存します。
- **利点**: 高速アクセス、簡単な実装。
- **欠点**: サーバーが再起動されるとセッションデータが失われる、スケーラビリティに欠ける（サーバー間でセッションを共有しにくい）。
- **例**: Node.jsの`express-session`で使用されるデフォルトのインメモリストア。

### 2. **データベースストア**
- **説明**: セッションデータを関係データベース（例：MySQL、PostgreSQL）やNoSQLデータベース（例：MongoDB）に保存します。
- **利点**: データの永続性、スケーラビリティの向上（複数のサーバーでセッションを共有可能）。
- **欠点**: インメモリストアに比べて遅い、データベースの運用管理が必要。
- **例**: `connect-mongodb-session`（MongoDBを使用）、`connect-pg-simple`（PostgreSQLを使用）。

### 3. **キャッシュストア**
- **説明**: セッションデータをキャッシュサーバー（例：Redis、Memcached）に保存します。
- **利点**: 高速アクセス、スケーラビリティ、データの永続性が向上（特にRedisの場合）。
- **欠点**: インメモリストアに比べるとやや遅いが、データベースストアよりは高速。
- **例**: `connect-redis`（Redisを使用）、`connect-memcached`（Memcachedを使用）。

### 4. **Cookieストア**
- **説明**: セッションデータをユーザーのブラウザに保存されるCookieに直接保存します。
- **利点**: サーバーサイドでのストレージ管理が不要、スケーラビリティの問題がない。
- **欠点**: セキュリティのリスク（Cookieのサイズ制限、クライアント側での改ざんのリスク）、データ量の制限がある。
- **例**: `cookie-session`（Node.jsでの実装）。

