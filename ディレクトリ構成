├── src/
│   ├── app/
│   │   ├── api/
│   │   │   ├── ledgerInquiry/
│   │   │   │   ├── download/
│   │   │   │   │   └── route.ts
│   │   │   │   ├── listing/
│   │   │   │   │   └── route.ts
│   │   │   │   └── login/
│   │   │   │       └── route.ts
│   │   ├── ledgerInquiry/
│   │   │   ├── components/
│   │   │   ├── layout.tsx
│   │   │   ├── page.tsx
│   │   │   ├── types.d.ts
│   │   │   └── useLedgerInquiry.tsx
│   │   ├── consts.ts
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── components/
│   │   ├── common/
│   │   │   ├── Footer.tsx
│   │   │   ├── Header.tsx
│   │   │   └── Title.tsx
│   │   ├── xxx/
│   │   │   ├── index.tsx
│   │   │   └── types.d.ts
│   │   └── ...
│   ├── lib/
│   │   └── ...
│   ├── styles/
│   │   └── globals.css
│   ├── types/
│   │   ├── index.d.ts
│   │   └── ...
│   ├── utils/
│   │   └── ...


以下のようなコードが必要です。
-----------------------------
src/app/ledgerInquiry/useledgerInquiry.tsx
を作成して

に画面遷移したら
src/app/api/ledgerInquiry/listing
をAPIコールしてデータを取得する
取得したデータを
src/components/LedgerTable
に表示する
-----------------------------
src/app/ledgerInquiry/page.tsx
はVIEWのコードだけにして
処理は
src/app/ledgerInquiry/useledgerInquiry.tsx
に移動してください

-----------------------------
src/app/api/consts.ts
で定数を管理したいです。
'/api/ledgerInquiry/listing'
を定数にしたいので修正してください。
以下は現行のコードです
-----------------------------
//src/app/ledgerInquiry/useLedgerInquiry.tsx
import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import { RedgerTable } from "@/components/LedgerTable/types";

export function useLedgerInquiry() {
    const [ledgerItems, setLedgerItems] = useState<RedgerTable[]>([]);
    const searchParams = useSearchParams();
    const userId = searchParams.get('userId');
    const cic = searchParams.get('cic');

    useEffect(() => {
        if (userId && cic) {
            console.log('UserID:', userId);
            console.log('CIC:', cic);
            fetch('/api/ledgerInquiry/listing')
                .then(response => response.json())
                .then(data => {
                    setLedgerItems(data.items);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }
    }, [userId, cic]);

    return { ledgerItems };
}

-----------------------------
// src/app/ledgerInquiry/page.tsx
'use client'; // クライアントコンポーネントとしてマーク

import { LedgerTable } from "@/components/LedgerTable";
import { useLedgerInquiry } from "./useLedgerInquiry";

export default function LedgerInquiryPage() {
  const { ledgerItems } = useLedgerInquiry();

  return (
    <div className='container mx-auto bg-white mb-5'>
      <LedgerTable items={ledgerItems} />
    </div>
  );
}

-----------------------------
// src/app/ledgerInquiry/listing/route.ts
import { NextRequest, NextResponse } from 'next/server'
import logger from '@/lib/logger';

export async function GET(req: NextRequest) {
  logger.info('[INFO] Listing API called');
  return NextResponse.json({ message: 'Listing API called!' })
}

-----------------------------
// src/components/LedgerTable/index.tsx 
'use client'

import { useState } from "react";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Pagination } from "@/components/ui/pagination";
import { RedgerTable } from "@/components/LedgerTable/types";

export function LedgerTable({ items }: { items: RedgerTable[] }) {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(20);
  const totalItems = items.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleDownload = async (id: number) => {
    try {
      const response = await fetch(`/api/ledgerInquiry/download?id=${id}`);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `document_${id}.pdf`;
      document.body.appendChild(a);
      a.click();
      a.remove();
    } catch (error) {
      console.error('Error downloading file:', error);
    }
  };

  return (
    <div className='flex items-center py-4'>
      <div className="w-full max-w-4xl mx-auto border rounded-lg shadow-lg my-8">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="text-right rounded-tl-lg bg-[#fdebd9] border-b border-[#fdebd9]">No.</TableHead>
              <TableHead className="bg-[#fdebd9] border-b border-[#fdebd9]">発行日</TableHead>
              <TableHead className="bg-[#fdebd9] border-b border-[#fdebd9]">書類名</TableHead>
              <TableHead className="rounded-tr-lg bg-[#fdebd9] border-b border-[#fdebd9]" />
            </TableRow>
          </TableHeader>
          <TableBody>
            {currentItems.map((item) => (
              <TableRow key={item.id}>
                <TableCell className="text-right border-b border-muted">{item.id}</TableCell>
                <TableCell className="border-b border-muted">{item.issueDate}</TableCell>
                <TableCell className="border-b border-muted">{item.documentName}</TableCell>
                <TableCell className="text-right border-b border-muted">
                  <Button
                    size="sm"
                    variant="outline"
                    className="border-[#eb7000] hover:bg-[#fdebd9] text-[#eb7000] hover:text-[#eb7000]"
                    onClick={() => handleDownload(item.id)}
                  >
                    ダウンロード
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

